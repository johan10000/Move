* About:

  1. Primitive collection type provided by Move.
  2. A vector<T> can be instantiated with any type T. For example, vector<u64>, vector<address>, vector<0x42::MyModule::MyResource>, and vector<vector<u8>> are all valid vector types.

* Declaring vector:

  1. An empty vector: vector[],	vector[]: vector<T> where T is any single, non-reference type
  2. A vector with n elements (of length n): vector[e1, ..., en],	vector[e1, ..., en]: vector<T>
  
    In these cases, the type of the vector is inferred, either from the element type or from the vector's usage. If the type cannot be inferred, or simply for added clarity, the type can be specified explicitly:
    For example:

    vector[]: vector<bool> // Empty vector of bools
    vector[0u8, 1u8, 2u8]: vector<u8> // Vector containing 1, 2, 3
    vector<u128>[]: vector<u128> // Empty vector of 128
    vector<address>[@0x42, @0x100]: vector<address> // Vector contaning adresses 0x42, 0x100

* Byte array
    
    1. Often used for cryptographic purposes, we use "byte arrays", which are represented with vector<u8>.
    2. These values are so common that specific syntax is provided to make the values more readable, as opposed to having to use vector[] where each individual u8 value is specified in numeric form.
    3. There are currently two supported types of vector<u8> literals, byte strings and hex strings.

* Byte Strings

    1. They are prefixed by b
    2. These are ASCII encoded strings that allow for escape sequences.
    3. E.g. b"Hello!\n".

* Hex Strings

    1. Prefixed by x
    2. Each byte pair, ranging from 00 to FF, is interpreted as hex encoded u8 value. So each byte pair corresponds to a single entry in the resulting vector<u8>.
    3. E.g. x"48656C6C6F210A".

* Supported Escape sequences

    1. \n	New line (or Line feed)
    2. \r	Carriage return
    3. \t	Tab
    4. \\	Backslash
    5. \0	Null
    6. \"	Quote
    7. \xHH	Hex escape, inserts the hex byte sequence HH

* Definition: 

  A piece of code that is published by a specific account to run on-chain(more or less, a smart contract). 
  Modules are actually libraries that are a collection of types(structs, constants) and function
  They are the minimal unit of code abstraction

* Properties:

  1. Stored in global storage.
  2. Module names can start with letters a to z or letters A to Z. After the first character, module names can contain underscores _, letters a to z, letters A to Z, or digits 0 to 9.
  3. Good Practice: Typically, module names should start with a lowercase letter.
  4. Good Practice: Module names: should be lower snake case, e.g., fixed_point32, vector.
  5. Good Practice: Module file names: should be the same as the module name e.g., Option.move.
  6. Good Practice: All module use statements should be at the top of the module.
  7. Good Practice: Structs and constants should be declared before all functions in a module.
  8. All elements inside a module block can appear in any order.

* Syntax: How to write a module:

module 0x42 SocialNetwork{
}

0x42: The address (When we are running locally, it can be anything)

SocialNetwork: The name of the module (it can be anything)

Hence, The module 0x42::SocialNetwork part specifies that the module SocialNetwork will be published under the account address 0x42 in global storage.

Reuse:

  We can reuse modules via imports

  module coin::coin{
  }

  module defi::escrow{
    use coin::Coin;
  }

Publish:

  Multiple modules are bundled together in a single package to publish

